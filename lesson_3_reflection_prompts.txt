When would you want to use a remote repository rather than keeping all your work
local?

    When I am working with a group of people then using remote repositories become
    essential as multiple people can work on the same project and commit their changes to
    one secure location. Another advantage of using remote repositories over keeping all of
    my work local is the safety of a backup. The chances of a repository being lost
    from a server such as Github is much lower than the same files being lost or corrupted
    due to faults in my local machine.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I would always want to pull changes manually so that I have fine grain control. Someone else might have update the remote repository and if the changes are added automatically, they may cause a conflict with my current work. Only when I'm ready, I will pull in changes and update my local workspace.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork is a feature of Github. It clones one repository from one 
    account to another account on Github. Fork is used when we would
    like to make our own version of a public, open source project. 
    Fork makes sure that credit is given to original authors of the 
    work.

    Clone is used when we wish to clone, that is copy an entire project
    from one place to another. It could from one drive to another drive
    in the same computer or it could be from a remote source such as 
    Github to a local machine. Clone is used when we are collaborating
    and copying repositories from one place to another. It is a feature
    of Git.

    Branch is used when we wish to go of on a tangent from than main
    commit sequence (the master branch). Say we wish to try out an 
    experimental feature without making an changes to the production
    code that is seen by users. We can create a new branch, work on 
    the experimental feature and once we are confident of our product,
    we can merge it back into the master branch. Branching is very 
    useful for collaboration as it allows two developers to 
    simultaneously work on two new features and add them only once they
    are ready without modifying the production code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    If the last known state of the remote is stored locally, then we 
    can compate our work with the state of origin master and use
    commands such as git diff. This allows us to manually merge our 
    local file to the local copy of the origin and push the changes.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
